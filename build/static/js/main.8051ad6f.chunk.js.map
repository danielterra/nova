{"version":3,"sources":["BaseStyles.tsx","DataRecord/SectionComponent.tsx","DataRecord/TextField.tsx","DataRecord/CountryField.tsx","DataRecord/AddressField.tsx","DataRecord/DateField.tsx","DataRecord/ImageField.tsx","DataRecord/JsonField.tsx","DataRecord/UrlField.tsx","DataRecord/EmailField.tsx","DataRecord/PhoneField.tsx","DataRecord/CurrencyField.tsx","DataRecord/ReferenceField.tsx","DataRecord/index.tsx","DataExplorer.tsx","Orion.tsx","index.tsx"],"names":["primaryColor2","secondaryColor","actionColor","TextHeadline1","styled","h1","TextSection","h2","TextFieldLabel","label","TextBody1","p","Code","pre","OrionColumn","div","Container","Header","Body","props","hidden","TestButton","CustomTextSection","Section","title","expanded","useState","undefined","isHidden","setIsHidden","onClick","children","FieldContainer","TextField","content","CountryField","getUnicodeFlagIcon","getName","OpenMapAction","Googlemaps","Row","AddressField","window","open","encodeURIComponent","size","DateField","variant","moment","fromNow","format","ImageDisplay","img","AvatarDisplay","src","ImageField","alt","JsonField","JSON","stringify","OpenLinkAction","LinkExternal","UrlField","SendEmailAction","Email","CopyAction","Copy","Actions","EmailField","navigator","clipboard","writeText","err","console","error","alert","CallAction","PhoneOutgoing","WhatsappAction","Whatsapp","PhoneField","copyToClipboard","CurrencyField","Intl","NumberFormat","style","currency","parseFloat","ReferenceField","entity","data","schema","Array","isArray","map","item","index","DataRecord","sections","setSections","useEffect","key","indexOf","section","push","getDataKeysForSection","fieldsKeys","isTitle","getTitle","type","description","version","entities","transactions","DataExplorer","indexedDbData","setIndexedDbData","db","setDb","setTransactions","initDB","a","openDB","upgrade","upgradeDB","objectStoreNames","contains","createObjectStore","keyPath","createIndex","blocked","blocking","terminated","dbref","guid","s4","Math","floor","random","toString","substring","Object","values","val","name","updateRenderedTransactionsList","processPendingTransaction","getAll","dbTransactions","log","pendingTransaction","filter","t","completed","pop","operation","add","collection","value","endedAt","Date","put","sort","b","startedAt","slice","test","id","OrionContainer","Orion","novaDoc","okrs","okr","okrsSchema","dataExplorerDoc","componentDocumentationSchema","dataRecordDoc","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8051ad6f.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const primaryColor = \"rgb(0, 221, 255)\";\nexport const primaryColor2 = \"rgba(0, 221, 255, 0.6)\";\nexport const secondaryColor = \"rgb(255, 255, 255)\";\nexport const secondaryColor2 = \"rgba(255, 255, 255, 0.2)\";\nexport const actionColor = \"rgb(255, 98, 0)\";\nexport const actionColor2 = \"rgba(255, 98, 0, 0.2)\";\n\nexport const TextHeadline1 = styled.h1`\n    color: ${secondaryColor};\n    font-size: 32px;\n    font-weight: 500;\n    font-weight: 600;\n    line-height: 37px;\n    text-shadow: 2px 2px black;\n`;\n\nexport const TextSection = styled.h2`\n    font-size: 14px;\n    color: ${primaryColor2};\n    border-bottom: 1px solid;\n    padding-bottom: 2px;\n    font-weight: 700;\n    text-transform: uppercase;\n`;\n\nexport const TextFieldLabel = styled.label`\n    color: ${primaryColor2};\n    font-size: 12px;\n    font-weight: 600;\n    text-transform: uppercase;\n`;\n\nexport const TextBody1 = styled.p`\n    color: ${secondaryColor};\n    font-size: 16px;\n    font-weight: 500;\n    white-space: pre-line;\n`;\n\nexport const TextBody2 = styled.label`\n    color: ${secondaryColor2};\n    font-size: 10px;\n`;\n\nexport const Code = styled.pre`\n    font-family: monospace;\n    color: ${secondaryColor};\n    font-size: 10px;\n`;\n\nexport const OrionColumn = styled.div`\n    display: flex;\n    flex-direction: column;\n    max-height: 100%;\n    overflow-y: auto;\n    >*{\n        flex-shrink: 0;\n        margin-bottom: 20px;\n    }\n`;","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  primaryColor2,\n  TextSection,\n  actionColor,\n  TextFieldLabel\n} from \"BaseStyles\";\n\nconst Container = styled.div`\n    margin: 0px 0px 30px 0px;\n`;\n\nconst Header = styled.div`\n  border-bottom: 1px solid ${primaryColor2};\n`;\n\nconst Body = styled.div<{ hidden?: boolean }>`\n  height: ${(props) => props.hidden ? \"0px\" : \"auto\"};\n  overflow: hidden;\n`;\n\nconst TestButton = styled(TextFieldLabel)`\n  color: ${actionColor};\n  cursor: pointer;\n`;\n\nconst CustomTextSection = styled(TextSection)`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport interface SectionProps {\n  title: string;\n  children?: any;\n  expanded?: boolean;\n}\n\nexport const Section = (props: SectionProps) => {\n  const { title, expanded } = props;\n  const [isHidden, setIsHidden] = useState<boolean>(title !== undefined);\n\n  return (\n    <Container>\n      <Header>\n        {title && \n          <CustomTextSection>\n            {title}\n            <TestButton onClick={() => setIsHidden(!isHidden)}>{isHidden ? 'expand' : 'minimize'}</TestButton>\n          </CustomTextSection>\n        }\n      </Header>\n      <Body hidden={isHidden}>\n        {props.children}\n      </Body>\n    </Container>\n  )\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextFieldLabel, TextBody1 } from \"BaseStyles\";\n\nexport interface TextFieldProps {\n    label: string;\n    content: string;\n}\n\nconst FieldContainer = styled.div``;\n\nexport const TextField = (props: TextFieldProps) => {\n    const {label, content} = props;\n\n    return (\n        <FieldContainer>\n            <TextFieldLabel>{label}</TextFieldLabel>\n            <TextBody1>{content}</TextBody1>\n        </FieldContainer>\n    )\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode'\nimport { TextFieldLabel, TextBody1 } from \"BaseStyles\";\nimport { getName } from'country-list';\n\nexport interface CountryFieldProps {\n    label: string;\n    content: string;\n}\n\nconst FieldContainer = styled.div`\n\n`;\n\nexport const CountryField = (props: CountryFieldProps) => {\n    const {label, content} = props;\n\n    return (\n        <FieldContainer>\n            <TextFieldLabel>{label}</TextFieldLabel>\n            <TextBody1>{getUnicodeFlagIcon(content)} {getName(content)}</TextBody1>\n        </FieldContainer>\n    )\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextFieldLabel, TextBody1, actionColor } from \"BaseStyles\";\nimport { Googlemaps } from \"@styled-icons/simple-icons/Googlemaps\";\n\nexport interface AddressFieldProps {\n    label: string;\n    content: string;\n}\n\nconst FieldContainer = styled.div`\n\n`;\n\nconst OpenMapAction = styled(Googlemaps) `\n    color: ${actionColor};\n    cursor: pointer;\n    margin-left: 10px;\n`;\n\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`;\n\nexport const AddressField = (props: AddressFieldProps) => {\n    const {label, content} = props;\n\n    const openInGoogleMaps = () => {\n        window.open(`https://www.google.com/maps/place/${encodeURIComponent(content)}`, '_blank');\n    }\n\n    return (\n        <FieldContainer>\n            <TextFieldLabel>{label}</TextFieldLabel>\n            <Row>\n                <TextBody1>{content}</TextBody1>\n                <OpenMapAction onClick={openInGoogleMaps} size={20} />\n            </Row>\n        </FieldContainer>\n    )\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport { TextFieldLabel, TextBody1 } from \"BaseStyles\";\n\nexport interface DateFieldProps {\n    label: string;\n    content: string;\n    variant: string;\n}\n\nconst FieldContainer = styled.div`\n\n`;\n\nexport const DateField = (props: DateFieldProps) => {\n    const {label, content, variant} = props;\n\n    switch(variant) {\n        case \"age\":\n            return (\n                <FieldContainer>\n                    <TextFieldLabel>{label}</TextFieldLabel>\n                    <TextBody1>{moment(content).fromNow(true)}</TextBody1>\n                </FieldContainer>\n            )\n        case \"countdown\":\n            return (\n                <FieldContainer>\n                    <TextFieldLabel>{label}</TextFieldLabel>\n                    <TextBody1>{moment(content).format(\"dddd, MMMM Do YYYY HH:mm\")} ({moment(content).fromNow()})</TextBody1>\n                </FieldContainer>\n            )\n        default:\n            return (\n                <FieldContainer>\n                    <TextFieldLabel>{label}</TextFieldLabel>\n                    <TextBody1>{moment(content).format(\"dddd, MMMM Do YYYY HH:mm\")}</TextBody1>\n                </FieldContainer>\n            )\n    }\n\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextFieldLabel } from \"BaseStyles\";\n\nexport interface ImageFieldProps {\n    label: string;\n    content: string;\n    variant: string;\n    size: number;\n}\n\nconst FieldContainer = styled.div`\n\n`;\n\nconst ImageDisplay = styled.img`\n    width: 100%;\n`;\n\nconst AvatarDisplay = styled.div<{src: string, size: number}>`\n    display: block;\n    width: ${props => props.size}px;\n    height: ${props => props.size}px;\n    background: url(${props => props.src});\n    background-size: cover;\n    border-radius: ${props => props.size}px;\n`;\n\nexport const ImageField = (props: ImageFieldProps) => {\n    const {label, content, variant, size} = props;\n\n    switch(variant) {\n        case \"avatar\":\n            return (\n                <FieldContainer>\n                    <TextFieldLabel>{label}</TextFieldLabel>\n                    <AvatarDisplay src={content} size={size} />\n                </FieldContainer>\n            )\n        default:\n            return (\n                <FieldContainer>\n                    <TextFieldLabel>{label}</TextFieldLabel>\n                    <ImageDisplay src={content} alt={label} />\n                </FieldContainer>\n            )\n    }\n\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextFieldLabel, Code } from \"BaseStyles\";\n\nexport interface JsonFieldProps {\n    label: string;\n    content: string;\n}\n\nconst FieldContainer = styled.div`\n\n`;\n\nexport const JsonField = (props: JsonFieldProps) => {\n    const {label, content} = props;\n\n    return (\n        <FieldContainer>\n            <TextFieldLabel>{label}</TextFieldLabel>\n            <Code>{JSON.stringify(content, null, 4)}</Code>\n        </FieldContainer>\n    )\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextFieldLabel, TextBody1, actionColor } from \"BaseStyles\";\nimport { LinkExternal } from \"@styled-icons/boxicons-regular/LinkExternal\";\n\nexport interface UrlFieldProps {\n    label: string;\n    content: string;\n}\n\nconst FieldContainer = styled.div`\n\n`;\n\nconst OpenLinkAction = styled(LinkExternal) `\n    color: ${actionColor};\n    cursor: pointer;\n    margin-left: 10px;\n`;\n\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`;\n\nexport const UrlField = (props: UrlFieldProps) => {\n    const {label, content} = props;\n\n    const openUrl = () => {\n        window.open(content);\n    }\n\n    return (\n        <FieldContainer>\n            <TextFieldLabel>{label}</TextFieldLabel>\n            <Row>\n                <TextBody1>{content}</TextBody1>\n                <OpenLinkAction onClick={openUrl} size={20} />\n            </Row>\n        </FieldContainer>\n    )\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextFieldLabel, TextBody1, actionColor } from \"BaseStyles\";\nimport { Email } from \"@styled-icons/material-rounded/Email\";\nimport { Copy } from '@styled-icons/boxicons-regular/Copy';\n\nexport interface EmailFieldProps {\n    label: string;\n    content: string;\n}\n\nconst FieldContainer = styled.div`\n\n`;\n\nconst SendEmailAction = styled(Email) `\n    color: ${actionColor};\n    cursor: pointer;\n    margin-left: 10px;\n`;\n\nconst CopyAction = styled(Copy) `\n    color: ${actionColor};\n    cursor: pointer;\n    margin-left: 10px;\n`;\n\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`;\n\nconst Actions = styled.div``;\n\nexport const EmailField = (props: EmailFieldProps) => {\n    const {label, content} = props;\n\n    const sendEmail = () => {\n        window.open(`mailto:${content}`);\n    }\n\n    const copyToClipboard = () => {\n        if (!navigator.clipboard) {\n            // Clipboard API not available\n            return;\n        }\n        try {\n            navigator.clipboard.writeText(content);\n        } catch (err) {\n            console.error('Failed to copy!', err)\n        }\n        alert('Email copied');\n    }\n\n    return (\n        <FieldContainer>\n            <TextFieldLabel>{label}</TextFieldLabel>\n            <Row>\n                <TextBody1>{content}</TextBody1>\n                <Actions>\n                    <CopyAction onClick={copyToClipboard} size={20} />\n                    <SendEmailAction onClick={sendEmail} size={20} />\n                </Actions>\n            </Row>\n        </FieldContainer>\n    )\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextFieldLabel, TextBody1, actionColor } from \"BaseStyles\";\nimport { PhoneOutgoing } from \"@styled-icons/boxicons-regular/PhoneOutgoing\";\nimport { Copy } from '@styled-icons/boxicons-regular/Copy';\nimport { Whatsapp } from '@styled-icons/boxicons-logos/Whatsapp';\n\nexport interface PhoneFieldProps {\n    label: string;\n    content: string;\n    variant?: string;\n}\n\nconst FieldContainer = styled.div`\n\n`;\n\nconst CallAction = styled(PhoneOutgoing) `\n    color: ${actionColor};\n    cursor: pointer;\n    margin-left: 10px;\n`;\n\nconst CopyAction = styled(Copy) `\n    color: ${actionColor};\n    cursor: pointer;\n    margin-left: 10px;\n`;\n\nconst WhatsappAction = styled(Whatsapp) `\n    color: ${actionColor};\n    cursor: pointer;\n    margin-left: 10px;\n`;\n\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`;\n\nconst Actions = styled.div``;\n\nexport const PhoneField = (props: PhoneFieldProps) => {\n    const {label, content, variant} = props;\n\n    const callPhone = () => {\n        window.open(`tel:${content}`);\n    }\n\n    const sendWhatsappMessage = () => {\n        window.open(`https://api.whatsapp.com/send?phone=${content}`);\n    }\n\n    const copyToClipboard = () => {\n        if (!navigator.clipboard) {\n            // Clipboard API not available\n            return;\n        }\n        try {\n            navigator.clipboard.writeText(content);\n        } catch (err) {\n            console.error('Failed to copy!', err)\n        }\n        alert('Phone number copied');\n    }\n\n    switch (variant) {\n        case 'whatsapp':\n            return (\n                <FieldContainer>\n                    <TextFieldLabel>{label}</TextFieldLabel>\n                    <Row>\n                        <TextBody1>{content}</TextBody1>\n                        <Actions>\n                            <CopyAction onClick={copyToClipboard} size={20} />\n                            <WhatsappAction onClick={sendWhatsappMessage} size={20} />\n                        </Actions>\n                    </Row>\n                </FieldContainer>\n            )\n        default:\n            return (\n                <FieldContainer>\n                    <TextFieldLabel>{label}</TextFieldLabel>\n                    <Row>\n                        <TextBody1>{content}</TextBody1>\n                        <Actions>\n                            <CopyAction onClick={copyToClipboard} size={20} />\n                            <CallAction onClick={callPhone} size={20} />\n                        </Actions>\n                    </Row>\n                </FieldContainer>\n            )\n    }\n\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { TextFieldLabel, TextBody1 } from \"BaseStyles\";\n\nexport interface CurrencyFieldProps {\n    label: string;\n    content: string;\n    variant: string;\n}\n\nconst FieldContainer = styled.div``;\n\nexport const CurrencyField = (props: CurrencyFieldProps) => {\n    const {label, content, variant} = props;\n\n    return (\n        <FieldContainer>\n            <TextFieldLabel>{label}</TextFieldLabel>\n            <TextBody1>{new Intl.NumberFormat('pt-BR', { style: 'currency', currency: variant}).format(parseFloat(content))}</TextBody1>\n        </FieldContainer>\n    )\n}","import React from \"react\";\nimport { OrionColumn, TextFieldLabel } from \"BaseStyles\";\nimport { DataRecord } from \"DataRecord\";\n\nexport interface ReferenceFieldProps {\n    label: string;\n    entity: string;\n    data: any;\n    schema: any;\n}\n\nexport const ReferenceField = (props: ReferenceFieldProps) => {\n    const { entity, label, data, schema } = props;\n\n    return (\n        <>\n            <TextFieldLabel>{label}</TextFieldLabel>\n            <OrionColumn>\n                {Array.isArray(data) && data.map((item:any, index:number) => {\n                    return <DataRecord key={index} data={item} schema={schema} entity={entity}/>\n                })}\n                {!Array.isArray(data) && \n                    <DataRecord data={data} schema={schema} entity={entity}/>\n                }\n            </OrionColumn>\n        </>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport {\n  TextHeadline1,\n  TextSection\n} from 'BaseStyles';\nimport { Section } from './SectionComponent';\nimport { TextField } from './TextField';\nimport { CountryField } from './CountryField';\nimport { AddressField } from './AddressField';\nimport { DateField } from './DateField';\nimport { ImageField }  from './ImageField';\nimport { JsonField } from './JsonField';\nimport { UrlField } from './UrlField';\nimport { EmailField } from './EmailField';\nimport { PhoneField } from './PhoneField';\nimport { CurrencyField } from './CurrencyField';\nimport { ReferenceField } from './ReferenceField';\n\nconst Container = styled.div`\n    padding: 20px;\n    max-height: 100%;\n    max-width: 500px;\n    overflow-y: auto;\n    overflow-x: hidden;\n    background: #00ffe70f;\n    border: 1px solid #00ffe714;\n`;\n\nexport interface DRField {\n    label: string;\n    content: string;\n}\n\nexport interface DRSection {\n    title: string;\n    fields: DRField[];\n}\n\nexport interface DataRecordModel {\n    title: string;\n    sections: DRSection[];\n}\n\nexport interface DRMessage {\n    action: string;\n    payload: any;\n}\n\ninterface DataRecordProps {\n    data: any,\n    schema: any,\n    entity: string\n}\n\nexport const DataRecord = (props:DataRecordProps) => {\n    const {data, schema, entity} = props;\n    const [sections, setSections] = useState<string[]>([])\n\n    useEffect(() => {\n        if (data && schema) {\n            let sections: string[] = [];\n            for (let key in schema) {\n                if (sections.indexOf(schema[key].section) === -1) {\n                    sections.push(schema[key].section);\n                }\n            };\n\n            setSections(sections);\n        }\n    },[data, schema]);\n\n    const getTitle = () => {\n        for (let key in schema) {\n            if (schema[key].isTitle) {\n                return data[key];\n            }\n        }\n    }\n\n    const getDataKeysForSection = (section:string) => {\n        const fieldsKeys = [];\n        for (let key in schema) {\n            if (schema[key].section === section) {\n                fieldsKeys.push(key);\n            }\n        }\n\n        return fieldsKeys;\n    }\n\n    return (\n        <Container>\n            <TextSection>{entity}</TextSection>\n            <TextHeadline1>{getTitle()}</TextHeadline1>\n            { sections.map((section, index) =>\n                <Section key={index} title={section}>\n                    {getDataKeysForSection(section).map(key => {\n                        if (!data[key] || schema[key].isTitle) {\n                            return null;\n                        }\n\n                        switch(schema[key].type) {\n                            case 'short-text':\n                                return <TextField key={key} label={schema[key].label} content={data[key]}/>\n                            case 'long-text':\n                                return <TextField key={key} label={schema[key].label} content={data[key]}/>\n                            case 'date':\n                                return <DateField key={key} label={schema[key].label} content={data[key]} variant={schema[key].variant}/>\n                            case 'country':\n                                return <CountryField key={key} label={schema[key].label} content={data[key]}/>\n                            case 'address':\n                                return <AddressField key={key} label={schema[key].label} content={data[key]}/>\n                            case 'image':\n                                return <ImageField key={key} label={schema[key].label} content={data[key]} variant={schema[key].variant} size={schema[key].size}/>\n                            case 'json':\n                                return <JsonField key={key} label={schema[key].label} content={data[key]}/>\n                            case 'url':\n                                return <UrlField key={key} label={schema[key].label} content={data[key]}/>\n                            case 'email':\n                                return <EmailField key={key} label={schema[key].label} content={data[key]}/>\n                            case 'phone':\n                                return <PhoneField key={key} label={schema[key].label} content={data[key]} variant={schema[key].variant}/>\n                            case 'currency':\n                                return <CurrencyField key={key} label={schema[key].label} content={data[key]} variant={schema[key].variant}/>\n                            case 'reference':\n                                return <ReferenceField key={key} label={schema[key].label} data={data[key]} schema={schema[key].schema} entity={schema[key].entity}/>\n                            default:\n                                return <TextField key={key} label={schema[key].label} content={data[key]}/>\n                        }\n                    })}\n                </Section>\n            )}\n        </Container>\n    );\n}\n","import React, {useState, useEffect} from \"react\";\nimport { openDB, IDBPDatabase } from 'idb';\nimport { OrionColumn } from \"BaseStyles\";\n\nimport { DataRecord } from 'DataRecord';\n\nconst schema = {\n    title: {\n        type: \"short-text\",\n        label: \"title\",\n        isTitle: true\n    },\n    description: {\n        type: \"short-text\",\n        label: \"description\"\n    },\n    version: {\n        type: \"short-text\",\n        label: \"version\"\n    },\n    entities: {\n        type: \"json\",\n        label: \"Entities\"\n    },\n    transactions: {\n        type: \"json\",\n        section: \"logs\"\n    }\n}\n\ninterface DatabaseTransaction {\n    id: string;\n    collection: string;\n    operation: string;\n    value: any;\n    startedAt: Date;\n    index?: string;\n    completed?: boolean;\n    endedAt?: Date;\n    error: string;\n}\n\nexport const DataExplorer = () => {\n    const [indexedDbData, setIndexedDbData] = useState<any>(\n        {\n            title: \"Data Explorer\",\n            description: \"This represent the database showing the entities and operations logs\"\n        }\n    );\n    const [db, setDb] = useState<IDBPDatabase>();\n    const [transactions, setTransactions] = useState<DatabaseTransaction[]>([]);\n    \n    // Create connection with indexedDB\n    const initDB = async () => {\n        const dbref:IDBPDatabase = await openDB('NOVA', 2, {\n            upgrade: (upgradeDB:IDBPDatabase) => {\n                if (!upgradeDB.objectStoreNames.contains('ontology')) {\n                    upgradeDB.createObjectStore('ontology',{keyPath: \"name\"});\n                }\n                if (!upgradeDB.objectStoreNames.contains('dbTransactions')) {\n                    const dbTransactions = upgradeDB.createObjectStore('dbTransactions',{keyPath: \"id\"});\n                    dbTransactions.createIndex('recentBased', 'startedAt');\n                }\n            },\n            blocked: () => {\n                console.error(\" Called if there are older versions of the database open on the origin, so this version cannot open. This is similar to the blocked event in plain IndexedDB\");\n            },\n            blocking: () => {\n                console.error(\"Called if this connection is blocking a future version of the database from opening. This is similar to the versionchange event in plain IndexedDB.\");\n            },\n            terminated: () => {\n                console.error(\"Called if the browser abnormally terminates the connection, but not on regular closures like calling db.close(). This is similar to the close event in plain IndexedDB.\");\n            }\n        });\n\n        setDb(dbref);\n    }\n\n    // Generate a random key like mongo\n    const guid = () => {\n        let s4 = () => {\n            return Math.floor((1 + Math.random()) * 0x10000)\n                .toString(16)\n                .substring(1);\n        }\n        //return id of format 'aaaaaaaa'-'aaaa'-'aaaa'-'aaaa'-'aaaaaaaaaaaa'\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n    }\n\n    // Database connection changed\n    useEffect(() => {\n        if (!db) {\n            return;\n        }\n        const entities = Object.values(db.objectStoreNames).map((val) => { return {name: val}});\n\n        setIndexedDbData({\n            ...indexedDbData,\n            entities,\n            version: db.version\n        });\n\n        updateRenderedTransactionsList();\n        processPendingTransaction();\n    },[db]);\n\n    // Initialization\n    useEffect(() => {\n        initDB();\n    },[]);\n\n    const processPendingTransaction = async () => {\n        if (!db) {\n            return;\n        }\n\n        const dbTransactions:DatabaseTransaction[] = await db.getAll(\"dbTransactions\");\n        console.log(dbTransactions);\n        const pendingTransaction = dbTransactions.filter(t => !t.completed).pop();\n        console.log(pendingTransaction);\n        \n        if (!pendingTransaction) {\n            return;\n        }\n\n        switch (pendingTransaction.operation) {\n            case \"add\":\n                try {\n                    await db.add(pendingTransaction.collection, pendingTransaction.value);\n                } catch(err:any) {\n                    pendingTransaction.error = err.toString();\n                }\n                pendingTransaction.completed = true;\n                pendingTransaction.endedAt = new Date();\n                await db.put(\"dbTransactions\",pendingTransaction);\n                break;\n        \n            default:\n                break;\n        }\n\n        updateRenderedTransactionsList();\n    }\n\n    const updateRenderedTransactionsList = async () => {\n        if (!db) {\n            return;\n        }\n        // Get all transactions in memory, sort and limit to 10 most recent results\n        const transactions:DatabaseTransaction[] = await (await db.getAll(\"dbTransactions\")).sort((a:DatabaseTransaction, b:DatabaseTransaction) => {\n            if (a.startedAt < b.startedAt) {\n                return 1;\n            }\n            if (a.startedAt > b.startedAt) {\n                return -1;\n            }\n            return 0;\n        }).slice(0,10);\n        \n        // update the screen state\n        setTransactions(transactions);\n    }\n\n    const test = async () => {\n        if (!db) {\n            return;\n        }\n\n        await db.add(\"dbTransactions\", \n            {\n                id: guid(),\n                collection: \"ontology\",\n                operation: \"add\",\n                value: {\n                    name: \"person\"\n                },\n                completed: false,\n                startedAt: new Date()\n            }\n        );\n\n        await updateRenderedTransactionsList();\n        processPendingTransaction();\n    }\n\n    return (\n        <OrionColumn>\n            <button onClick={test}>teste</button>\n            <DataRecord data={{...indexedDbData, transactions}} schema={schema} entity=\"Database Component\"/>\n        </OrionColumn>\n    )\n}","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { DataRecord } from 'DataRecord';\nimport { Socket } from \"socket.io-client\";\nimport {DataExplorer} from \"./DataExplorer\";\n// import {Youtube} from \"./Youtube\";\n\n// DOCS\nimport novaDoc from './Docs/Nova.json';\nimport dataRecordDoc from './Docs/DataRecordDoc.json';\nimport componentDocumentationSchema from './Schemas/ComponentDocumentation.json';\nimport okrs from './Docs/OKRs.json';\nimport okrsSchema from './Schemas/OKR.json';\nimport dataExplorerDoc from './Docs/DataExplorerDoc.json';\n\nconst OrionContainer = styled.div`\n    height: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: left;\n    align-items: top;\n    overflow-x: auto;\n    >*{\n        margin: 20px;\n        flex-shrink: 0;\n        z-index: 1;\n    }\n`;\n\n// const OrionBackground = styled.div`\n//     width: 100%;\n//     height: 100%;\n//     position: fixed;\n//     background: url(https://loremflickr.com/${window.screen.width}/${window.screen.height}/night/all);\n//     background-repeat: no-repeat;\n//     background-size: cover;\n//     z-index: 0;\n//     margin: -20px;\n//     top: 0;\n//     left: 0;\n//     opacity: 0.6;\n//     filter: blur(10px);\n// `;\n\nexport const Orion = () => {\n    const [socket, setSocket] = useState<Socket | undefined>();\n    \n    const handleSocketConnected = (socket:Socket) => {\n        socket.emit('execute', 'ifconfig');\n        setSocket(socket);\n    }\n\n    const handleSocketDisconnected = (socket:Socket) => {\n        setSocket(socket);\n    }\n\n    return (\n        <OrionContainer>\n            {/* <OrionBackground /> */}\n            {/* <NovaCoreConnection \n                handleSocketConnected={handleSocketConnected}\n            handleSocketDisconnected={handleSocketDisconnected}/> */}\n            <DataRecord data={novaDoc.data} schema={novaDoc.schema} entity={novaDoc.entity}/>\n            {okrs.data.map((okr, index) => {\n                return <DataRecord key={index} data={okr} schema={okrsSchema.schema} entity={okrsSchema.entity}/>\n            })}\n            <DataRecord data={dataExplorerDoc.data} schema={componentDocumentationSchema.schema} entity={componentDocumentationSchema.entity}/>\n            <DataExplorer />\n            <DataRecord data={dataRecordDoc.data} schema={componentDocumentationSchema.schema} entity={componentDocumentationSchema.entity}/>\n            {/* <Youtube/> */}\n        </OrionContainer>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Orion } from \"./Orion\";\nimport './Nova.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Orion />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}